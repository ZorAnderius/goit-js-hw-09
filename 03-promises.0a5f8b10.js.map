{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,S,aAGMC,EAAM,CACVC,WAAYC,SAASC,cAAc,SACnCC,gBAAiBF,SAASC,cAAc,uBACxCE,eAAgBH,SAASC,cAAc,sBACvCG,YAAaJ,SAASC,cAAc,yBA8BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IApCPT,EAAIC,WAAWe,iBAAiB,UAEhC,SAAsBC,GACpBA,EAAEC,iBAIF,IAHA,IAAMC,GAAcnB,EAAII,gBAAgBgB,MAClCC,GAAarB,EAAIK,eAAee,MAChCE,GAAUtB,EAAIM,YAAYc,MACvBG,EAAW,EAAGA,GAAYD,EAAQC,IAAY,CAGrDhB,EAAcgB,EAFIJ,GAAcI,EAAW,GAAKF,GAG7CG,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MACjBX,EAAA4B,OAAOC,QACL,qBAAoCC,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,MAC1CoB,EAAAC,W,IAGHC,OAAM,SAAAN,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MAClBX,EAAA4B,OAAOM,QACL,oBAAmCJ,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,MACzCoB,EAAAC,W,IAIRb,EAAEgB,cAAcC,O","sources":["src/js/promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { notifyInit } from './notify-options';\n\nconst ref = {\n  submitForm: document.querySelector('.form'),\n  firstDelayInput: document.querySelector('input[name=\"delay\"]'),\n  delayStepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n};\n\nref.submitForm.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  const firstDelay = +ref.firstDelayInput.value;\n  const delayStep = +ref.delayStepInput.value;\n  const amount = +ref.amountInput.value;\n  for (let position = 1; position <= amount; position++) {\n    const delayTime = firstDelay + (position - 1) * delayStep;\n\n    createPromise(position, delayTime)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `Fulfilled promise ${position} in ${delay}ms`,\n          notifyInit\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `Rejected promise ${position} in ${delay}ms`,\n          notifyInit\n        );\n      });\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$95b1f5eb58d53a61$var$ref","submitForm","document","querySelector","firstDelayInput","delayStepInput","amountInput","$95b1f5eb58d53a61$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","firstDelay","value","delayStep","amount","position1","then","param","Notify","success","concat","$6SUe8","notifyInit","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.0a5f8b10.js.map"}