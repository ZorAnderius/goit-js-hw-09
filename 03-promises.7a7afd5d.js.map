{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aAGA,MAAMC,EAAM,CACVC,WAAYC,SAASC,cAAc,SACnCC,gBAAiBF,SAASC,cAAc,uBACxCE,eAAgBH,SAASC,cAAc,sBACvCG,YAAaJ,SAASC,cAAc,yBA8BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CApCbT,EAAIC,WAAWe,iBAAiB,UAEhC,SAAsBC,GACpBA,EAAEC,iBACF,MAAMC,GAAcnB,EAAII,gBAAgBgB,MAClCC,GAAarB,EAAIK,eAAee,MAChCE,GAAUtB,EAAIM,YAAYc,MAChC,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,IAAY,CAGrDhB,EAAcgB,EAFIJ,GAAcI,EAAW,GAAKF,GAG7CG,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBX,EAAA2B,OAAOC,QACL,qBAAqBlB,QAAeC,MACpCkB,EAAAC,WACD,IAEFC,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBX,EAAA2B,OAAOK,QACL,oBAAoBtB,QAAeC,MACnCkB,EAAAC,WACD,G,CAGPX,EAAEc,cAAcC,O","sources":["src/js/promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { notifyInit } from './notify-options';\n\nconst ref = {\n  submitForm: document.querySelector('.form'),\n  firstDelayInput: document.querySelector('input[name=\"delay\"]'),\n  delayStepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n};\n\nref.submitForm.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  const firstDelay = +ref.firstDelayInput.value;\n  const delayStep = +ref.delayStepInput.value;\n  const amount = +ref.amountInput.value;\n  for (let position = 1; position <= amount; position++) {\n    const delayTime = firstDelay + (position - 1) * delayStep;\n\n    createPromise(position, delayTime)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `Fulfilled promise ${position} in ${delay}ms`,\n          notifyInit\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `Rejected promise ${position} in ${delay}ms`,\n          notifyInit\n        );\n      });\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$255e371459344cd5$var$ref","submitForm","document","querySelector","firstDelayInput","delayStepInput","amountInput","$255e371459344cd5$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","firstDelay","value","delayStep","amount","position1","then","Notify","success","$fT11K","notifyInit","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.7a7afd5d.js.map"}